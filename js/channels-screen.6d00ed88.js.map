{"version":3,"sources":["webpack:///./src/components/InputField.vue?08a9","webpack:///./src/libs/streamEvents.js","webpack:///./src/screens/Channels.vue?db20","webpack:///./src/screens/Channels.vue","webpack:///./src/components/InputField.vue","webpack:///src/components/InputField.vue","webpack:///./src/components/InputField.vue?c147","webpack:///./src/components/InputField.vue?ba49","webpack:///src/screens/Channels.vue","webpack:///./src/screens/Channels.vue?e96a","webpack:///./src/screens/Channels.vue?9ffd","webpack:///./src/libs/youtubeConnect.js","webpack:///./src/libs/twitchConnect.js"],"names":["TextMessage","constructor","userId","userName","text","source","this","trim","DonateMessage","amount","type","Subscriber","Follower","render","_vm","_c","_self","staticClass","_v","_s","_f","$store","state","locale","ref","attrs","model","value","twitchChannel","callback","$$v","expression","youtubeUrl","on","connect","staticRenderFns","placeholder","domProps","val","$event","$emit","target","name","props","methods","getImgUrl","component","components","InputField","BigButton","data","computed","local","mounted","YoutubeConnect","streamURLString","apikey","split","reverse","join","streamURL","URL","lastMessagesId","vuewersCount","channel","nextPageToken","consoleStyle","hostname","streamId","searchParams","get","pathname","substr","events","onMessage","onSub","onFollower","onSuperchat","onConnect","onDisconnect","onError","fetch","then","res","json","chatId","items","liveStreamingDetails","activeLiveChatId","snippet","channelId","_updateChat","updTimer","setInterval","bind","_log","catch","err","_signal","disconnect","clearInterval","updateViewers","length","viewersCount","concurrentViewers","forEach","msg","includes","id","splice","push","authorChannelId","authorDetails","displayName","superChatDetails","tier","amountMicros","superStickerDetails","displayMessage","console","log","TwitchConnect","botname","server","lastFollowers","plannedDisconnect","onBits","window","location","protocol","webSocket","WebSocket","onmessage","onerror","onclose","onClose","onopen","onOpen","startCheckNewFollowers","checkFollowersFrom","Date","now","waitUserId","_checkFollowers","updFollowersTimer","stopCheckNewFollowers","headers","stream","viewers","parsed","_parseMessage","command","tags","hasOwnProperty","bits","parseFloat","bitsType","bitsCount","Math","round","message","send","readyState","toLowerCase","close","follower","from_id","followed_at","from_name","rawMessage","parsedMessage","original","username","tagIndex","indexOf","userIndex","commandIndex","channelIndex","messageIndex","slice","keyedTags","splitted","startsWith"],"mappings":"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","file":"js/channels-screen.6d00ed88.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InputField.vue?vue&type=style&index=0&id=4b09c508&prod&lang=scss&\"","/**\n * Basic text message from Twitch or Youtube chat\n */\nexport class TextMessage {\n\n  /**\n   *\n   * @param {Number|String} userId - Unique user id\n   * @param {String} userName - Displayed user name\n   * @param {String} text - Message text\n   * @param {String} source - Source of message, \"yt\" for YouTube, \"tw\" fro Twitch\n   */\n  constructor(userId, userName, text, source) {\n    this.userId = userId;\n    this.userName = userName;\n    this.text = text.trim();\n    this.source = source;\n  }\n\n}\n\n/**\n * Bits message for Twitch\n * Superchat message for Youtube\n */\nexport class DonateMessage {\n\n  /**\n   *\n   * @param {Number|String} userId - Unique user id\n   * @param {String} userName - Displayed user name\n   * @param {Number} amount - Amount of bits\n   * @param {Number} type - Type of bits\n   * @param {String} source - Source of message, \"yt\" for YouTube, \"tw\" fro Twitch\n   */\n  constructor (userId, userName, amount, type, source) {\n    this.userId = userId;\n    this.userName = userName;\n    this.amount = amount;\n    this.type = type;\n    this.source = source;\n  }\n}\n\n/**\n * New subscriber on Twitch\n * New sponsor on YouTube\n */\nexport class Subscriber {\n\n  /**\n   *\n   * @param {Number|String} userId - Unique user id\n   * @param {String} userName - Displayed user name\n   * @param {String} source - Source of message, \"yt\" for YouTube, \"tw\" fro Twitch\n   */\n  constructor (userId, userName, source) {\n    this.userId = userId;\n    this.userName = userName;\n    this.source = source;\n  }\n}\n\n/**\n * New followers\n * Currently not using\n */\nexport class Follower {\n  constructor (userId, userName, source) {\n    this.userId = userId;\n    this.userName = userName;\n    this.source = source;\n  }\n}","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Channels.vue?vue&type=style&index=0&id=55b139ca&prod&lang=scss&\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"channelScreen\"},[_c('h1',[_vm._v(_vm._s(_vm._f(\"t\")(\"whoAreYou\",_vm.$store.state.locale)))]),_c('div',{staticClass:\"channels-description\"},[_vm._v(_vm._s(_vm._f(\"t\")(\"channelsDesc\",_vm.$store.state.locale)))]),_c('div',{staticClass:\"fields\"},[_c('div',{staticClass:\"field\"},[_c('div',{staticClass:\"sign twitch\"},[_vm._v(\"Twitch\")]),_c('InputField',{ref:\"twitchChannel\",attrs:{\"placeholder\":_vm._f(\"t\")('channelName',_vm.$store.state.locale)},model:{value:(_vm.twitchChannel),callback:function ($$v) {_vm.twitchChannel=$$v},expression:\"twitchChannel\"}})],1),_c('div',{staticClass:\"field\"},[_c('div',{staticClass:\"sign youtube\"},[_vm._v(\"YouTube\")]),_c('InputField',{attrs:{\"placeholder\":_vm._f(\"t\")('streamURL',_vm.$store.state.locale)},model:{value:(_vm.youtubeUrl),callback:function ($$v) {_vm.youtubeUrl=$$v},expression:\"youtubeUrl\"}})],1)]),_c('div',[_c('BigButton',{on:{\"onClick\":_vm.connect}},[_vm._v(_vm._s(_vm._f(\"t\")(\"play\",_vm.$store.state.locale))+\" >\")])],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"inputField\"},[_c('input',{ref:\"inputField\",attrs:{\"type\":\"text\",\"placeholder\":_vm.placeholder},domProps:{\"value\":_vm.val},on:{\"input\":function($event){return _vm.$emit('input', $event.target.value)}}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"inputField\">\n    <input ref=\"inputField\" v-bind:value=\"val\" v-on:input=\"$emit('input', $event.target.value)\" type=\"text\" :placeholder=\"placeholder\"/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"InputField\",\n\n  props: {\n    placeholder: String,\n    val: String\n  },\n\n  methods: {\n    getImgUrl(img) {\n      var images = require.context('../assets/img/', false, /\\.png$/)\n      return images('./' + img + \".png\")\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.inputField {\n  background-image: url(\"../assets/img/inputBg.png\");\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: left;\n\n  height: 100px;\n  padding: 5px;\n\n  display: flex;\n  justify-content: left;\n  align-items: center;\n  padding-left: 25px;\n\n  input {\n    max-width: 500px;\n    width: 95%;\n    outline: none;\n    border: none;\n    background: none;\n    font: 1.5rem TeamMeat;\n    border-bottom: 3px solid #333;\n    margin-bottom: 3.8%;\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InputField.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./InputField.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./InputField.vue?vue&type=template&id=4b09c508&\"\nimport script from \"./InputField.vue?vue&type=script&lang=js&\"\nexport * from \"./InputField.vue?vue&type=script&lang=js&\"\nimport style0 from \"./InputField.vue?vue&type=style&index=0&id=4b09c508&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"channelScreen\">\n    <h1>{{\"whoAreYou\" | t($store.state.locale)}}</h1>\n    <div class=\"channels-description\">{{\"channelsDesc\" | t($store.state.locale)}}</div>\n    <div class=\"fields\">\n      <div class=\"field\">\n        <div class=\"sign twitch\">Twitch</div>\n        <InputField v-model=\"twitchChannel\" ref=\"twitchChannel\" :placeholder=\"'channelName' | t($store.state.locale)\"/>\n      </div>\n      <div class=\"field\">\n        <div class=\"sign youtube\">YouTube</div>\n        <InputField v-model=\"youtubeUrl\" :placeholder=\"'streamURL' | t($store.state.locale)\"/>\n      </div>\n    </div>\n    <div>\n      <BigButton @onClick=\"connect\">{{\"play\" | t($store.state.locale)}} ></BigButton>\n    </div>\n  </div>\n</template>\n\n<script>\nimport InputField from '../components/InputField.vue';\nimport BigButton from '../components/BigButton.vue';\n\nimport TwitchConnect from '../libs/twitchConnect.js';\nimport YoutubeConnect from '../libs/youtubeConnect.js'\n\nexport default {\n  name: 'channelScreen',\n  components: {\n    InputField, BigButton\n  },\n\n  data () {\n    return {\n      twitchChannel: \"\",\n      youtubeUrl: \"\"\n    }\n  },\n\n  computed: {\n    local () {\n      return this.$root.local;\n    }\n  },\n\n  methods: {\n\n    connect () {\n\n      if (this.twitchChannel == '' && this.youtubeUrl == '') return;\n\n      if (this.twitchChannel != '') {\n        this.$services.twitch = new TwitchConnect(this.twitchChannel);\n        this.$services.twitch.connect();\n        this.$store.commit('setTwitchName', this.twitchChannel);\n        //this.$services.twitch.startCheckNewFollowers();\n      }\n\n      if (this.youtubeUrl != '') {\n        this.$services.youtube = new YoutubeConnect(this.youtubeUrl);\n        this.$services.youtube.connect();\n      }\n\n      this.$router.push('/settings');\n    }\n  },\n\n  mounted () {\n    this.$refs.twitchChannel.$refs.inputField.value = this.$store.state.twitchName;\n    this.twitchChannel = this.$store.state.twitchName;\n  }\n}\n</script>\n\n<style lang=\"scss\">\n\n.channels-description {\n  font-size: 16px;\n  margin-top: -12px;\n  margin-bottom: 20px;\n}\n\n.fields {\n  display: inline-block;\n  margin: 0 auto;\n\n  .sign {\n    font-size: 1.8rem;\n    margin-right: 15px;\n  }\n\n  .field {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Channels.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Channels.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Channels.vue?vue&type=template&id=55b139ca&\"\nimport script from \"./Channels.vue?vue&type=script&lang=js&\"\nexport * from \"./Channels.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Channels.vue?vue&type=style&index=0&id=55b139ca&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import {TextMessage, DonateMessage, Subscriber} from './streamEvents';\n\nexport default class YoutubeConnect {\n\n  /**\n   * Create new chat object for Youtube\n   * @param {String} streamURLString - URL for YouTube stream\n   */\n  constructor (streamURLString) {\n    this.apikey = \"wgnn-wBx-_VT5Nu996o8ylc-t786swbRBySazIA\".split('').reverse().join('');\n    this.streamURL = new URL(streamURLString);\n    this.lastMessagesId = [];\n    this.vuewersCount = 0;\n    this.channel = null;\n    this.nextPageToken = null;\n\n    this.consoleStyle = 'background-color: #FF0000; color: #FFFFFF; border-radius: 100px;padding: 1px 4px;';\n\n    if (this.streamURL.hostname == \"www.youtube.com\" || this.streamURL.hostname == \"youtube.com\") {\n      this.streamId = this.streamURL.searchParams.get('v');\n    }\n    else {\n      this.streamId = this.streamURL.pathname.substr(1);\n    }\n\n    this.events = {\n      onMessage: () => {},\n      onSub: () => {},\n      onFollower: () => {},\n      onSuperchat: () => {},\n\n      onConnect: () => {},\n      onDisconnect: () => {},\n      onError:  () => {}\n    }\n  }\n\n  connect () {\n    fetch(\n      \"https://www.googleapis.com/youtube/v3/videos?id=\" + this.streamId + \"&part=snippet,liveStreamingDetails&key=\" + this.apikey\n    )\n    .then(res => {\n      return res.json()\n    })\n    .then (res => {\n      this.chatId = res.items[0].liveStreamingDetails.activeLiveChatId;\n      this.channel = res.items[0].snippet.channelId;\n      this._updateChat();\n      this.updTimer = setInterval(this._updateChat.bind(this), 5000);\n\n      this._log(\"Connected to \" + this.chatId);\n      this._log(\"Channel id: \" + this.channel);\n    })\n    .catch (err => {\n      this._signal('onError', err);\n    })\n  }\n\n  disconnect () {\n\n    clearInterval(this.updTimer);\n    this._signal('onDisconnect', null);\n\n  }\n\n  updateViewers() {\n\n    return fetch(\n      `https://www.googleapis.com/youtube/v3/videos?part=liveStreamingDetails&id=${this.streamId}&fields=items%2FliveStreamingDetails&key=${this.apikey}`\n      )\n      .then(res => res.json())\n      .then(res => {\n        if (res.items?.length > 0) {\n          this.viewersCount = res.items[0].liveStreamingDetails.concurrentViewers\n        }\n      })\n\n  }\n\n  _updateChat () {\n    fetch(\n      \"https://www.googleapis.com/youtube/v3/liveChat/messages?liveChatId=\" + this.chatId + \"&part=id,snippet,authorDetails&maxResults=100&key=\" + this.apikey +\n      (this.nextPageToken ? '&nextPageToken=' + this.nextPageToken : '')\n    )\n    .then (res => {\n      return res.json();\n    })\n    .then (res => {\n      res.items.forEach(msg => {\n        if (res?.nextPageToken) {\n          this.nextPageToken = res.nextPageToken;\n        }\n\n        // If message exists, just skip it\n        if (this.lastMessagesId.includes(msg.id)) return;\n\n        // Check array size and clear it if need\n        if (this.lastMessagesId.length > 1000)\n          this.lastMessagesId = this.lastMessagesId.splice(100, 900);\n\n        // Add new message to readed\n        this.lastMessagesId.push(msg.id);\n\n        // Check if this is a basic message\n        if (msg.snippet.type == 'textMessageEvent') {\n\n          this._signal('onMessage', new TextMessage(\n            msg.snippet.authorChannelId,\n            msg.authorDetails.displayName,\n            msg.snippet.displayMessage,\n            'yt'\n          ));\n          return;\n        }\n\n        // Check if message have superchat data (like bits for Twitch)\n        if (msg.snippet.type == 'superChatEvent') {\n          this._signal('onSuperchat', new DonateMessage(\n            msg.snippet.authorChannelId,\n            msg.authorDetails.displayName,\n            msg.snippet.superChatDetails.tier > 5 ? 5 : msg.snippet.superChatDetails.tier,\n            1,\n            'yt'\n          ));\n\n          this._log(\"Get donate from \" + msg.authorDetails.displayName + \" - \" + msg.snippet.superChatDetails.amountMicros);\n          return;\n        }\n\n        else if (msg.snippet.type == 'superStickerEvent') {\n          this._signal('onSuperchat', new DonateMessage(\n            msg.snippet.authorChannelId,\n            msg.authorDetails.displayName,\n            msg.snippet.superStickerDetails.tier > 5 ? 5 : msg.snippet.superStickerDetails.tier,\n            1,\n            'yt'\n          ));\n\n          this._log(\"Get donate from \" + msg.authorDetails.displayName + \" - \" + msg.snippet.superChatDetails.amountMicros);\n          return;\n        }\n\n        // Check if this is new subscriber\n        if (msg.snippet.type == 'newSponsorEvent') {\n          this._signal('onSub', new Subscriber(\n            msg.snippet.authorChannelId,\n            msg.authorDetails.displayName,\n            'yt'\n          ));\n\n          this._log(\"New subscriber \" + msg.authorDetails.displayName);\n          return;\n        }\n      });\n    })\n  }\n\n  _log (msg) {\n    console.log('%cYoutube%c ' + msg, this.consoleStyle, '');\n  }\n\n  _signal (name, data) {\n\n    this.events[name](data);\n\n  }\n\n}","import {TextMessage, DonateMessage, Subscriber, Follower} from './streamEvents';\n\nexport default class TwitchConnect {\n\n  /**\n   * Create new chat object for Twitch\n   * @param {String} channel - Streamer nickname\n   */\n  constructor (channel) {\n    this.channel = channel;\n    this.userId = null;\n    this.viewersCount = 0;\n\n    this.apikey = \"vtr91vw1dzji7piypq7r13itr6is2i\"; // API Key for Twitch API. Not very secret information\n    this.botname = \"justinfan666\";\n    this.server = \"irc-ws.chat.twitch.tv\";\n\n    this.consoleStyle = 'background-color: #6441A4; color: #FFFFFF; border-radius: 100px;padding: 1px 4px;';\n\n    this.lastFollowers = [];\n    this.plannedDisconnect = false;\n\n    this.events = {\n      onMessage: () => {},\n      onSub: () => {},\n      onFollower: () => {},\n      onBits: () => {},\n\n      onConnect: () => {},\n      onDisconnect: () => {},\n      onError: () => {}\n    }\n  }\n\n  /**\n   * Connect to Twitch chat using websockets\n   */\n  connect () {\n    if (window.location.protocol.includes('https')) {\n      this.webSocket = new WebSocket('wss://' + this.server + ':443/', 'irc');\n    }\n    else {\n      this.webSocket = new WebSocket('ws://' + this.server + ':80/', 'irc');\n    }\n\n\n    this.webSocket.onmessage = this.onMessage.bind(this);\n    this.webSocket.onerror = this.onError.bind(this);\n    this.webSocket.onclose = this.onClose.bind(this);\n    this.webSocket.onopen = this.onOpen.bind(this);\n  }\n\n  /**\n   * Lauching request for checking new followers.\n   * Not working, because requires backend implementation\n   */\n  startCheckNewFollowers () {\n    this.checkFollowersFrom = Date.now();\n\n    let waitUserId = setInterval((() => {\n      if (this.userId) {\n        clearInterval(waitUserId);\n        this._checkFollowers();\n        this.updFollowersTimer = setInterval(this._checkFollowers.bind(this), 3*60*1000);\n      }\n    }).bind(this), 500);\n  }\n\n  /**\n   * Disable followers checking\n   */\n  stopCheckNewFollowers () {\n    clearInterval(this.updFollowersTimer);\n  }\n\n  updateViewers () {\n\n    return fetch(`https://api.twitch.tv/helix/streams?user_login=${this.channel}`, {\n      headers: { 'Client-ID': this.apikey },\n    })\n    .then(res => res.json())\n    .then(res => {\n      if (res.stream) {\n        this.viewersCount = res.stream.viewers\n      }\n    })\n\n  }\n\n  /**\n   * Calling whem new message received\n   * @param {String} msg - Raw message from Twitch\n   */\n  onMessage(msg) {\n    // Ignore incorrect messages\n    if (msg == null) return;\n\n    // Try to parse message\n    let parsed = this._parseMessage(msg.data);\n\n    //Ignore unparsed messages\n    if (parsed == null) return;\n\n    // Get PING, send PONG\n    if (parsed.command === \"PING\") {\n      this.webSocket.send(\"PONG :\" + parsed.message);\n      return;\n    }\n\n    // Get user id\n    if (parsed.command === \"ROOMSTATE\") {\n      this.userId = parsed.tags['room-id'];\n      return;\n    }\n\n    // Handle subscribers\n    if (parsed.command == \"USERNOTICE\" && (parsed.tags[\"msg-id\"].includes('sub') || parsed.tags[\"msg-id\"].includes('gift'))) {\n\n      // Gifted subs\n      if (parsed.tags.hasOwnProperty(\"msg-param-recipient-display-name\")) {\n        this._signal('onSub', new Subscriber(\n          parsed.tags[\"msg-param-recipient-id\"],\n          parsed.tags[\"msg-param-recipient-display-name\"],\n          'tw'\n        ));\n\n        this._log(\"New gifted subscriber \" + parsed.tags[\"msg-param-recipient-display-name\"]);\n      }\n\n      // Basic subs\n      else {\n        this._signal('onSub', new Subscriber(\n          parsed.tags[\"user-id\"],\n          parsed.tags[\"display-name\"],\n          'tw'\n        ));\n      }\n\n      this._log(\"New subscriber \" + parsed.tags[\"display-name\"]);\n    }\n\n    // Handle bits\n    else if (parsed.command == \"PRIVMSG\" && parsed.tags.hasOwnProperty('bits')) {\n\n      let bits = parseFloat(parsed.tags[\"bits\"]);\n      let bitsType = 1;\n      let bitsCount = bits > 10 ? 10 : bits;\n\n      if (bits < 10) return;\n\n      if (bits / 100 >= 1) {\n        bitsType = 2;\n        bitsCount = Math.round(bits / 100);\n      }\n\n      if (bits / 1000 >= 1) {\n        bitsType = 3;\n        bitsCount = Math.round(bits / 1000);\n      }\n\n      if (bits / 5000 >= 1) {\n        bitsType = 4;\n        bitsCount = Math.round(bits / 5000);\n      }\n\n      if (bits / 10000 >= 1) {\n        bitsType = 5;\n        bitsCount = Math.round(bits / 10000);\n      }\n\n      bitsCount = bitsCount > 10 ? 10 : bitsCount;\n\n      this._signal('onBits', new DonateMessage(\n        parsed.tags[\"user-id\"],\n        parsed.tags[\"display-name\"],\n        bitsCount,\n        bitsType,\n        'tw'\n      ));\n\n      this._log(\"Get donate from \" + parsed.tags[\"display-name\"] + \" - \" + parsed.tags[\"bits\"]);\n    }\n\n    // Handle default message\n    else if (parsed.command == \"PRIVMSG\") {\n      this._signal('onMessage', new TextMessage(\n        parsed.tags[\"user-id\"],\n        parsed.tags[\"display-name\"],\n        parsed.message,\n        'tw'\n      ));\n    }\n  }\n\n  /**\n   * Called on error with websocket\n   * @param {String} msg\n   */\n  onError (msg) {\n    this._signal('onError', msg);\n    this._log(\"Error: \");\n    console.log(msg);\n  }\n\n  /**\n   * Called on disconnect from websocket\n   */\n  onClose () {\n    if (this.plannedDisconnect) {\n      this._signal('onDisconnect');\n    }\n    else {\n      this.connect();\n    }\n\n    this._log(\"Disconnect from websocket\");\n  }\n\n  /**\n   * Called when connection with chat established\n   */\n  onOpen () {\n    if (this.webSocket !== null && this.webSocket.readyState === 1) {\n      this._log(\"Connected to websocket\");\n\n      this.webSocket.send('CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership');\n      this.webSocket.send('NICK ' + this.botname);\n      this.webSocket.send('JOIN #' + this.channel.toLowerCase());\n\n      this._signal('onConnect');\n    }\n  }\n\n  /**\n   * Close current connection with Twitch chat\n   */\n  close () {\n    this.plannedDisconnect = true;\n    if(this.webSocket){\n      this.webSocket.close();\n    }\n  }\n\n  _signal (name, data) {\n    this.events[name](data);\n  }\n\n  _checkFollowers () {\n    fetch (\"https://api.twitch.tv/helix/users/follows?first=100&to_id=\" + this.userId, {\n      headers: {\n        'Client-ID': this.apikey\n      }\n    })\n    .then (res => res.json())\n    .then (res => {\n      res.data.forEach(follower => {\n        // If follower exists, skip it\n        if (this.lastFollowers.includes(follower.from_id)) return;\n\n        // Check array size and clear it if need\n        if (this.lastFollowers > 1000)\n          this.lastFollowers = this.lastFollowers.splice(100, 900);\n\n        // Add new follower to readed\n        this.lastFollowers.push(follower.from_id);\n\n        if (new Date(follower.followed_at) < this.checkFollowersFrom) return;\n\n        this._signal('onFollower', new Follower(\n          follower.from_id,\n          follower.from_name,\n          'tw'\n        ));\n\n        this._log(\"New follower \" + follower.from_name);\n      })\n    })\n  }\n\n  _log (msg) {\n    console.log('%cTwitch%c ' + msg, this.consoleStyle, '');\n  }\n\n  _parseMessage(rawMessage) {\n    let parsedMessage = {\n        message: null,\n        tags: null,\n        command: null,\n        original: rawMessage,\n        channel: null,\n        username: null\n    };\n\n    if(rawMessage[0] === '@') {\n        let tagIndex = rawMessage.indexOf(' '),\n        userIndex = rawMessage.indexOf(' ', tagIndex + 1),\n        commandIndex = rawMessage.indexOf(' ', userIndex + 1),\n        channelIndex = rawMessage.indexOf(' ', commandIndex + 1),\n        messageIndex = rawMessage.indexOf(':', channelIndex + 1);\n\n        // Parse tags to key-value dictionary\n        let tags = rawMessage.slice(0, tagIndex) != null ? rawMessage.slice(0, tagIndex).substr(1).split(\";\") : [];\n        let keyedTags = {};\n\n        tags.forEach(val => {\n          let splitted = val.split('=');\n          keyedTags[splitted[0]] = splitted[1];\n        });\n\n        parsedMessage.tags = keyedTags;\n\n        parsedMessage.username = rawMessage.slice(tagIndex + 2, rawMessage.indexOf('!'));\n        parsedMessage.command = rawMessage.slice(userIndex + 1, commandIndex);\n        parsedMessage.channel = rawMessage.slice(commandIndex + 1, channelIndex);\n        parsedMessage.message = rawMessage.slice(messageIndex + 1);\n    }\n    else if (rawMessage.startsWith(\"PING\")) {\n        parsedMessage.command = \"PING\";\n        parsedMessage.message = rawMessage.split(\":\")[1];\n    }\n\n    return parsedMessage;\n  }\n}"],"sourceRoot":""}